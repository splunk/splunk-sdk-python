#
version: 2.1
orbs:
  docker: circleci/docker@0.5.13
jobs:
  build:
    working_directory: ~/your_project
    docker:
      - image: python:3.6.0
    steps:
      - checkout
      - run:
            name: Trigger Jobs
            command: |
              # a similar function will liekly get built in into the circleci cli 
              function trigger_job() {
                job_name=$1
                curl -u ${CIRCLE_API_TOKEN}: \
                  -d build_parameters[CIRCLE_JOB]=${job_name} \
                  -d revision=$CIRCLE_SHA1 \
                  https://circleci.com/api/v1.1/project/github/rfaircloth-splunk/splunk-sdk-python/tree/$CIRCLE_BRANCH
              }      
              trigger_job build-python27
              trigger_job build-python35
              trigger_job build-python36
              trigger_job build-python37
      - deploy:
          name: Echo
          command: echo "I would deploy here"

  # here are our jobs with different Python versions
  build-python27:
       docker:
         - image: python:2.7
       working_directory: ~/your_project
       environment:
         - SPLUNK_VERSION: 7.2-sdk
       steps:
         - checkout
         - docker/install-docker
         - run: echo "hello python 2.7"
          # Create .splunkrc file with default credentials
         - run: echo host=127.0.0.1 >> $HOME/.splunkrc
         - run: echo username=admin >> $HOME/.splunkrc
         - run: echo password=changed! >> $HOME/.splunkrc
          # Set SPLUNK_HOME
         - run: export SPLUNK_HOME="/opt/splunk"
          # Pull docker image
         - run: docker pull splunk/splunk-sdk-travis-ci:$SPLUNK_VERSION
          # Add DOCKER to iptables, 1/10 times this is needed, force 0 exit status
         - run: sudo iptables -N DOCKER || true
          # Start Docker container
         - run: docker run -p 127.0.0.1:8089:8089 -d splunk/splunk-sdk-travis-ci:$SPLUNK_VERSION
          # curl Splunk until it returns valid data indicating it has been setup, try 20 times maximum
         - run: for i in `seq 0 20`; do if curl --fail -k https://localhost:8089/services/server/info &> /dev/null; then break; fi; echo $i; sleep 1; done
          # The upload test needs to refer to a file that Splunk has in the docker
          # container
         - run: export INPUT_EXAMPLE_UPLOAD=$SPLUNK_HOME/var/log/splunk/splunkd_ui_access.log
          # After initial setup, we do not want to give the SDK any notion that it has
          # a local Splunk installation it can use, so we create a blank SPLUNK_HOME
          # for it, and make a placeholder for log files (which some tests generate)
         - run: export SPLUNK_HOME=`pwd`/splunk_home
         - run: mkdir -p $SPLUNK_HOME/var/log/splunk
  
  build-python35:
       docker:
         - image: python:3.5
       working_directory: ~/your_project
       steps:
         - run: echo "hello python 3.5"
  
  build-python36:
       docker:
         - image: python:3.6
       working_directory: ~/your_project
       steps:
         - run: echo "hello python 3.6"
  build-python37:
       docker:
         - image: python:3.7
       working_directory: ~/your_project
       steps:
         - run: echo "hello python 3.7"


workflows:
  version: 2
  build:
    jobs:
      - build-python27